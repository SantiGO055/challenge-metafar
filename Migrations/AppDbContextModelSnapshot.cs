// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace challenge_metafar.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.CuentaBancaria", b =>
                {
                    b.Property<int>("IDCuentaBancaria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDCuentaBancaria"));

                    b.Property<int>("IDMovimiento")
                        .HasColumnType("int");

                    b.Property<int>("IDTarjeta")
                        .HasColumnType("int");

                    b.Property<int>("NroCuenta")
                        .HasColumnType("int");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("IDCuentaBancaria");

                    b.HasIndex("IDTarjeta")
                        .IsUnique();

                    b.ToTable("CuentaBancaria");
                });

            modelBuilder.Entity("Domain.Models.Movimiento", b =>
                {
                    b.Property<int>("IDMovimientos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDMovimientos"));

                    b.Property<DateTime>("FechaMovimiento")
                        .HasColumnType("datetime2");

                    b.Property<int>("IDCuentaBancaria")
                        .HasColumnType("int");

                    b.Property<int>("IDTipoMovimiento")
                        .HasColumnType("int");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("IDMovimientos");

                    b.HasIndex("IDCuentaBancaria");

                    b.HasIndex("IDTipoMovimiento");

                    b.ToTable("Movimiento");
                });

            modelBuilder.Entity("Domain.Models.Tarjeta", b =>
                {
                    b.Property<int>("IDTarjeta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDTarjeta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDTarjeta"));

                    b.Property<int>("Intentos")
                        .HasColumnType("int");

                    b.Property<int>("NroTarjeta")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<int>("Pin")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("Pin");

                    b.Property<bool>("TarjetaBloqueada")
                        .HasColumnType("bit");

                    b.HasKey("IDTarjeta");

                    b.ToTable("Tarjeta", (string)null);
                });

            modelBuilder.Entity("Domain.Models.TipoMovimiento", b =>
                {
                    b.Property<int>("IDTipoMovimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDTipoMovimiento"));

                    b.Property<string>("DescripcionMovimiento")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDTipoMovimiento");

                    b.ToTable("TipoMovimiento");
                });

            modelBuilder.Entity("Domain.Models.Usuario", b =>
                {
                    b.Property<int>("IDUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDUsuario"));

                    b.Property<int>("IDCuentaBancaria")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDUsuario");

                    b.HasIndex("IDCuentaBancaria")
                        .IsUnique();

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Domain.Models.CuentaBancaria", b =>
                {
                    b.HasOne("Domain.Models.Tarjeta", "Tarjeta")
                        .WithOne("CuentaBancaria")
                        .HasForeignKey("Domain.Models.CuentaBancaria", "IDTarjeta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tarjeta");
                });

            modelBuilder.Entity("Domain.Models.Movimiento", b =>
                {
                    b.HasOne("Domain.Models.CuentaBancaria", "CuentaBancaria")
                        .WithMany("Movimientos")
                        .HasForeignKey("IDCuentaBancaria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.TipoMovimiento", "TipoMovimiento")
                        .WithMany("Movimientos")
                        .HasForeignKey("IDTipoMovimiento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuentaBancaria");

                    b.Navigation("TipoMovimiento");
                });

            modelBuilder.Entity("Domain.Models.Usuario", b =>
                {
                    b.HasOne("Domain.Models.CuentaBancaria", "CuentaBancaria")
                        .WithOne("Usuario")
                        .HasForeignKey("Domain.Models.Usuario", "IDCuentaBancaria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuentaBancaria");
                });

            modelBuilder.Entity("Domain.Models.CuentaBancaria", b =>
                {
                    b.Navigation("Movimientos");

                    b.Navigation("Usuario")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Tarjeta", b =>
                {
                    b.Navigation("CuentaBancaria")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.TipoMovimiento", b =>
                {
                    b.Navigation("Movimientos");
                });
#pragma warning restore 612, 618
        }
    }
}
